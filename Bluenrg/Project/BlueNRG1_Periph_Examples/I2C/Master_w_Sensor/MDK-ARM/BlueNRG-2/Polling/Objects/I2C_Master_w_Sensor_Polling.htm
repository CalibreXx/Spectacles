<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Polling\Objects\I2C_Master_w_Sensor_Polling.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Polling\Objects\I2C_Master_w_Sensor_Polling.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Mar 04 20:01:32 2020
<BR><P>
<H3>Maximum Stack Usage =        136 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RESET_HANDLER &rArr; main &rArr; SystemInit &rArr; DeviceConfiguration &rArr; BOR_ConfigSave
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[38]">assert_failed</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">assert_failed</a><BR>
 <LI><a href="#[9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">ADC_Handler</a> from system_bluenrg1.o(i.ADC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[11]">Blue_Handler</a> from system_bluenrg1.o(i.Blue_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[1c]">DMA_Handler</a> from bluenrg1_it.o(i.DMA_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[d]">GPIO_Handler</a> from system_bluenrg1.o(i.GPIO_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[9]">HardFault_Handler</a> from bluenrg1_it.o(i.HardFault_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[15]">I2C1_Handler</a> from bluenrg1_it.o(i.I2C1_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[14]">I2C2_Handler</a> from bluenrg1_it.o(i.I2C2_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[4]">LPS25HB_GetPressure</a> from lps25hb.o(i.LPS25HB_GetPressure) referenced 2 times from lps25hb.o(.data)
 <LI><a href="#[5]">LPS25HB_GetTemperature</a> from lps25hb.o(i.LPS25HB_GetTemperature) referenced 2 times from lps25hb.o(.data)
 <LI><a href="#[0]">LPS25HB_Init</a> from lps25hb.o(i.LPS25HB_Init) referenced 2 times from lps25hb.o(.data)
 <LI><a href="#[1]">LPS25HB_PowerOff</a> from lps25hb.o(i.LPS25HB_PowerOff) referenced 2 times from lps25hb.o(.data)
 <LI><a href="#[2]">LPS25HB_ReadID</a> from lps25hb.o(i.LPS25HB_ReadID) referenced 2 times from lps25hb.o(.data)
 <LI><a href="#[3]">LPS25HB_RebootCmd</a> from lps25hb.o(i.LPS25HB_RebootCmd) referenced 2 times from lps25hb.o(.data)
 <LI><a href="#[6]">LPS25HB_SlaveAddrRemap</a> from lps25hb.o(i.LPS25HB_SlaveAddrRemap) referenced 2 times from lps25hb.o(.data)
 <LI><a href="#[16]">MFT1A_Handler</a> from system_bluenrg1.o(i.MFT1A_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[17]">MFT1B_Handler</a> from system_bluenrg1.o(i.MFT1B_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[18]">MFT2A_Handler</a> from system_bluenrg1.o(i.MFT2A_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[19]">MFT2B_Handler</a> from system_bluenrg1.o(i.MFT2B_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[8]">NMI_Handler</a> from bluenrg1_it.o(i.NMI_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[e]">NVM_Handler</a> from system_bluenrg1.o(i.NVM_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[1b]">PKA_Handler</a> from system_bluenrg1.o(i.PKA_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[b]">PendSV_Handler</a> from system_bluenrg1.o(i.PendSV_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[7]">RESET_HANDLER</a> from system_bluenrg1.o(i.RESET_HANDLER) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[1a]">RTC_Handler</a> from system_bluenrg1.o(i.RTC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[10]">SPI_Handler</a> from system_bluenrg1.o(i.SPI_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[a]">SVC_Handler</a> from bluenrg1_it.o(i.SVC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[c]">SysTick_Handler</a> from bluenrg1_it.o(i.SysTick_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[f]">UART_Handler</a> from system_bluenrg1.o(i.UART_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[12]">WDG_Handler</a> from system_bluenrg1.o(i.WDG_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[1e]">fputc</a> from sdk_eval_com.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1d]">main</a> from i2c_master_w_sensor_main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[71]"></a>CS_contextSave</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, context_switch.o(. text), UNUSED)

<P><STRONG><a name="[67]"></a>CS_contextRestore</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, context_switch.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[1f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[72]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry3.o(.ARM.Collect$$$$00000002))

<P><STRONG><a name="[20]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[36]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[73]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[74]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[75]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[76]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[77]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[78]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_GetTemperature
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[25]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_GetTemperature
</UL>

<P><STRONG><a name="[51]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_GetPressure
</UL>

<P><STRONG><a name="[7b]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_GetTemperature
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_GetPressure
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[7c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[23]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2c]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[2b]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[21]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[80]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>ADC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.ADC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[3e]"></a>BOR_ConfigSave</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, system_bluenrg1.o(i.BOR_ConfigSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BOR_ConfigSave
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
</UL>

<P><STRONG><a name="[11]"></a>Blue_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.Blue_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[37]"></a>DMA_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bluenrg1_dma.o(i.DMA_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaI2CHandlerCallback
</UL>

<P><STRONG><a name="[39]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluenrg1_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaI2CHandlerCallback
</UL>

<P><STRONG><a name="[1c]"></a>DMA_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg1_it.o(i.DMA_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_Handler &rArr; DmaI2CHandlerCallback &rArr; DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaI2CHandlerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[3b]"></a>DeviceConfiguration</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, system_bluenrg1.o(i.DeviceConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DeviceConfiguration &rArr; BOR_ConfigSave
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetPartInfo
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RF_FrontEnd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOR_ConfigSave
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3a]"></a>DmaI2CHandlerCallback</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, sdk_eval_i2c.o(i.DmaI2CHandlerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DmaI2CHandlerCallback &rArr; DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Handler
</UL>

<P><STRONG><a name="[d]"></a>GPIO_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.GPIO_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[41]"></a>GPIO_Init</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, bluenrg1_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[42]"></a>GPIO_ToggleBits</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluenrg1_gpio.o(i.GPIO_ToggleBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ToggleBits
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedToggle
</UL>

<P><STRONG><a name="[43]"></a>GPIO_WriteBit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bluenrg1_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedOff
</UL>

<P><STRONG><a name="[44]"></a>Get_LedGpioPin</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sdk_eval_led.o(i.Get_LedGpioPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_LedGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedToggle
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedOff
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedInit
</UL>

<P><STRONG><a name="[3d]"></a>HAL_GetPartInfo</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, miscutil.o(i.HAL_GetPartInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetPartInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextRF_transaction
</UL>

<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg1_it.o(i.I2C1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C1_Handler &rArr; IrqI2CHandlerCallback &rArr; I2C_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqI2CHandlerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[14]"></a>I2C2_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg1_it.o(i.I2C2_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C2_Handler &rArr; IrqI2CHandlerCallback &rArr; I2C_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqI2CHandlerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[46]"></a>I2C_BeginTransaction</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, bluenrg1_i2c.o(i.I2C_BeginTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_BeginTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
</UL>

<P><STRONG><a name="[47]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bluenrg1_i2c.o(i.I2C_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CInit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqI2CHandlerCallback
</UL>

<P><STRONG><a name="[48]"></a>I2C_FillTxFIFO</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bluenrg1_i2c.o(i.I2C_FillTxFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_FillTxFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
</UL>

<P><STRONG><a name="[49]"></a>I2C_FlushTx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bluenrg1_i2c.o(i.I2C_FlushTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_FlushTx
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
</UL>

<P><STRONG><a name="[4a]"></a>I2C_GetITStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bluenrg1_i2c.o(i.I2C_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqI2CHandlerCallback
</UL>

<P><STRONG><a name="[4b]"></a>I2C_GetStatus</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bluenrg1_i2c.o(i.I2C_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
</UL>

<P><STRONG><a name="[4c]"></a>I2C_Init</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, bluenrg1_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CInit
</UL>

<P><STRONG><a name="[4e]"></a>I2C_ReceiveData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluenrg1_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
</UL>

<P><STRONG><a name="[5a]"></a>I2C_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bluenrg1_i2c.o(i.I2C_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CInit
</UL>

<P><STRONG><a name="[4f]"></a>I2C_WaitFlushTx</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bluenrg1_i2c.o(i.I2C_WaitFlushTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_WaitFlushTx
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
</UL>

<P><STRONG><a name="[45]"></a>IrqI2CHandlerCallback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sdk_eval_i2c.o(i.IrqI2CHandlerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IrqI2CHandlerCallback &rArr; I2C_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetITStatus
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearITPendingBit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>

<P><STRONG><a name="[16]"></a>MFT1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFT1A_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[17]"></a>MFT1B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFT1B_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[18]"></a>MFT2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFT2A_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[19]"></a>MFT2B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFT2B_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[e]"></a>NVM_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.NVM_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1b]"></a>PKA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.PKA_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[7]"></a>RESET_HANDLER</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_bluenrg1.o(i.RESET_HANDLER))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = RESET_HANDLER &rArr; main &rArr; SystemInit &rArr; DeviceConfiguration &rArr; BOR_ConfigSave
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.RTC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[70]"></a>SET_BORconfigStatus</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, system_bluenrg1.o(i.SET_BORconfigStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SET_BORconfigStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextRF_transaction
</UL>

<P><STRONG><a name="[10]"></a>SPI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.SPI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[6f]"></a>SdkDelayMs</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, i2c_master_w_sensor_main.o(i.SdkDelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdkDelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>SdkEvalComUartInit</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sdk_eval_com.o(i.SdkEvalComUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SdkEvalComUartInit &rArr; UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxFifoIrqLevelConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>SdkEvalGetVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdk_eval_config.o(i.SdkEvalGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LedGpioPin
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqI2CHandlerCallback
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaI2CHandlerCallback
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[52]"></a>SdkEvalI2CInit</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, sdk_eval_i2c.o(i.SdkEvalI2CInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SdkEvalI2CInit &rArr; I2C_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StructInit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearITPendingBit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[50]"></a>SdkEvalI2CRead</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, sdk_eval_i2c.o(i.SdkEvalI2CRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SdkEvalI2CRead &rArr; I2C_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitFlushTx
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetITStatus
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FlushTx
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FillTxFIFO
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearITPendingBit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BeginTransaction
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_RebootCmd
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadID
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_PowerOff
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_GetTemperature
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_GetPressure
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>SdkEvalI2CWrite</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, sdk_eval_i2c.o(i.SdkEvalI2CWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SdkEvalI2CWrite &rArr; I2C_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitFlushTx
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetITStatus
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FlushTx
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FillTxFIFO
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearITPendingBit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BeginTransaction
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_RebootCmd
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_PowerOff
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[6c]"></a>SdkEvalIdentification</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdk_eval_config.o(i.SdkEvalIdentification))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>SdkEvalLedInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sdk_eval_led.o(i.SdkEvalLedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SdkEvalLedInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedOff
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LedGpioPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>SdkEvalLedOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdk_eval_led.o(i.SdkEvalLedOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SdkEvalLedOff &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LedGpioPin
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedInit
</UL>

<P><STRONG><a name="[5d]"></a>SdkEvalLedToggle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdk_eval_led.o(i.SdkEvalLedToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SdkEvalLedToggle &rArr; GPIO_ToggleBits
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LedGpioPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>Set_RF_FrontEnd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_bluenrg1.o(i.Set_RF_FrontEnd))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
</UL>

<P><STRONG><a name="[65]"></a>SysCtrl_GetWakeupResetReason</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, bluenrg1_sysctrl.o(i.SysCtrl_GetWakeupResetReason))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[56]"></a>SysCtrl_PeripheralClockCmd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bluenrg1_sysctrl.o(i.SysCtrl_PeripheralClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysCtrl_PeripheralClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bluenrg1_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[61]"></a>SystemInit</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, system_bluenrg1.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SystemInit &rArr; DeviceConfiguration &rArr; BOR_ConfigSave
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>UART_Cmd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bluenrg1_uart.o(i.UART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[5f]"></a>UART_GetFlagStatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bluenrg1_uart.o(i.UART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalUart_Send_Data
</UL>

<P><STRONG><a name="[f]"></a>UART_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.UART_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[57]"></a>UART_Init</STRONG> (Thumb, 456 bytes, Stack size 16 bytes, bluenrg1_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[58]"></a>UART_RxFifoIrqLevelConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bluenrg1_uart.o(i.UART_RxFifoIrqLevelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxFifoIrqLevelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[60]"></a>UART_SendData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluenrg1_uart.o(i.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalUart_Send_Data
</UL>

<P><STRONG><a name="[12]"></a>WDG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.WDG_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[63]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[83]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[6e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[85]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[33]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[54]"></a>__low_level_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, system_bluenrg1.o(i.__low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __low_level_init &rArr; nextRF_transaction &rArr; SET_BORconfigStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_GetWakeupResetReason
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextRF_transaction
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_contextRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[86]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[87]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[88]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[38]"></a>assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2c_master_w_sensor_main.o(i.assert_failed))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitFlushTx
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetITStatus
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FlushTx
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FillTxFIFO
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearITPendingBit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BeginTransaction
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxFifoIrqLevelConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
</UL>

<P><STRONG><a name="[1e]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdk_eval_com.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; SdkEvalUart_Send_Data &rArr; UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalUart_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[1d]"></a>main</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, i2c_master_w_sensor_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = main &rArr; SystemInit &rArr; DeviceConfiguration &rArr; BOR_ConfigSave
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkDelayMs
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedToggle
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalIdentification
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4]"></a>LPS25HB_GetPressure</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lps25hb.o(i.LPS25HB_GetPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LPS25HB_GetPressure &rArr; SdkEvalI2CRead &rArr; I2C_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>LPS25HB_GetTemperature</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lps25hb.o(i.LPS25HB_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LPS25HB_GetTemperature &rArr; SdkEvalI2CRead &rArr; I2C_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>LPS25HB_Init</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, lps25hb.o(i.LPS25HB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LPS25HB_Init &rArr; SdkEvalI2CRead &rArr; I2C_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>LPS25HB_PowerOff</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lps25hb.o(i.LPS25HB_PowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LPS25HB_PowerOff &rArr; SdkEvalI2CRead &rArr; I2C_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>LPS25HB_ReadID</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lps25hb.o(i.LPS25HB_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPS25HB_ReadID &rArr; SdkEvalI2CRead &rArr; I2C_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>LPS25HB_RebootCmd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps25hb.o(i.LPS25HB_RebootCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LPS25HB_RebootCmd &rArr; SdkEvalI2CRead &rArr; I2C_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalI2CRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>LPS25HB_SlaveAddrRemap</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lps25hb.o(i.LPS25HB_SlaveAddrRemap))
<BR>[Address Reference Count : 1]<UL><LI> lps25hb.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>SdkEvalUart_Send_Data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sdk_eval_com.o(i.SdkEvalUart_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SdkEvalUart_Send_Data &rArr; UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[62]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_bluenrg1.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[66]"></a>nextRF_transaction</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, system_bluenrg1.o(i.nextRF_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nextRF_transaction &rArr; SET_BORconfigStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetPartInfo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_BORconfigStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[68]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[64]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[6b]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6a]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
